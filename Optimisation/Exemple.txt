Exemple complet avec un décorateur
utils.py (même que précédemment, avec la fonction de debug) :
python
Copier le code
import traceback

def format_table(headers, rows):
    """Formate un tableau avec des colonnes alignées."""
    column_widths = [len(header) for header in headers]
    for row in rows:
        for i, cell in enumerate(row):
            column_widths[i] = max(column_widths[i], len(str(cell)))
    row_format = " | ".join(f"{{:<{width}}}" for width in column_widths)
    header_line = row_format.format(*headers)
    separator = "-+-".join("-" * width for width in column_widths)
    data_lines = "\n".join(row_format.format(*[str(cell) for cell in row]) for row in rows)
    return f"{header_line}\n{separator}\n{data_lines}"

def debug_info_as_table():
    """Capture et affiche les détails d'une exception sous forme de tableaux alignés."""
    try:
        exc_type, exc_value, exc_traceback = traceback.sys.exc_info()
        stack_summary = traceback.extract_tb(exc_traceback)
        
        # Détails de la pile
        error_details = [
            [call.filename, call.lineno, call.name, call.line.strip()]
            for call in stack_summary
        ]
        error_table = format_table(
            headers=["File", "Line", "Function", "Code"],
            rows=error_details
        )
        
        frame = exc_traceback.tb_frame
        while frame.tb_next is not None:
            frame = frame.tb_next
        locals_data = [[k, repr(v)] for k, v in frame.f_locals.items()]
        locals_table = format_table(
            headers=["Variable", "Value"],
            rows=locals_data
        )
        return f"\n--- Stack Trace ---\n{error_table}\n\n--- Local Variables ---\n{locals_table}"
    except Exception as e:
        return f"Erreur dans debug_info_as_table : {e}"

def error_decorator(func):
    """Décorateur pour surveiller les exceptions dans les fonctions."""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception:
            print(f"Erreur détectée dans {func.__name__}:")
            print(debug_info_as_table())  # Affichage de l'erreur via la fonction de debug
            raise  # Réélever l'exception pour la laisser remonter
    return wrapper
main.py (utilisation du décorateur) :
Dans ce fichier, vous appliquez le décorateur à la fonction qui peut potentiellement générer une exception, et le décorateur gère l'affichage des erreurs avec debug_info_as_table.

python
Copier le code
from utils import error_decorator, debug_info_as_table

@error_decorator
def division(a, b):
    return a / b  # Cela provoque une exception si b == 0

def main():
    try:
        division(10, 0)  # Cela va provoquer une exception de division par zéro
    except Exception as e:
        print("Erreur détectée dans le main:")
        print(debug_info_as_table())  # Vous pouvez aussi capturer l'erreur dans le main si nécessaire

main()
Fonctionnement du décorateur
Le décorateur error_decorator entoure la fonction division et intercepte toutes les exceptions qui se produisent pendant l'exécution de cette fonction.
Si une exception est capturée, le décorateur appelle la fonction debug_info_as_table pour afficher la stack trace et les variables locales dans un format de tableau.
Ensuite, l'exception est réélevée (raise) pour permettre à l'appelant (ici, la fonction main) de capturer l'exception à son niveau, si nécessaire.
Résultat attendu
Lors de l'exécution, vous devriez voir quelque chose comme cela dans la sortie, si une division par zéro se produit :

less
Copier le code
Erreur détectée dans division:

--- Stack Trace ---
File        | Line | Function   | Code
------------+------+------------+-------------------
main.py     | 7    | division   | return a / b
main.py     | 15   | main       | division(10, 0)

--- Local Variables ---
Variable  | Value
----------+-------
a         | 10
b         | 0

Erreur détectée dans le main:

--- Stack Trace ---
File        | Line | Function   | Code
------------+------+------------+-------------------
main.py     | 15   | main       | division(10, 0)

--- Local Variables ---
Variable  | Value
----------+-------
e         | ZeroDivisionError('division by zero')
Explication
Décorateur (error_decorator) :

Le décorateur attrape l'exception levée par division, appelle debug_info_as_table() pour afficher la stack trace et les variables locales, puis rééleve l'exception pour que le programme puisse la gérer dans le main().
Gestion de l'exception dans main() :

Si l'exception est réélevée, elle peut aussi être capturée dans le bloc try-except de la fonction main, où vous pouvez afficher des informations supplémentaires ou gérer l'erreur de manière spécifique.